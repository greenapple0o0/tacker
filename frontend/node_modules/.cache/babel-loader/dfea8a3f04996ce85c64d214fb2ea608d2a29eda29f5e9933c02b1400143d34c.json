{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Countdown(_ref){let{lastReset,onReset}=_ref;const[timeLeft,setTimeLeft]=useState(0);useEffect(()=>{const updateCountdown=()=>{const now=new Date();const resetTime=new Date(lastReset);resetTime.setDate(resetTime.getDate()+1);const diff=resetTime-now;if(diff<=0){onReset();}else{setTimeLeft(diff);}};const interval=setInterval(updateCountdown,1000);updateCountdown();return()=>clearInterval(interval);},[lastReset,onReset]);const formatTime=ms=>{const totalSeconds=Math.floor(ms/1000);const h=Math.floor(totalSeconds/3600);const m=Math.floor(totalSeconds%3600/60);const s=totalSeconds%60;return\"\".concat(h,\"h \").concat(m,\"m \").concat(s,\"s\");};return/*#__PURE__*/_jsxs(\"div\",{className:\"countdown\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Time left until next reset:\"}),/*#__PURE__*/_jsx(\"div\",{children:formatTime(timeLeft)})]});}","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Countdown","_ref","lastReset","onReset","timeLeft","setTimeLeft","updateCountdown","now","Date","resetTime","setDate","getDate","diff","interval","setInterval","clearInterval","formatTime","ms","totalSeconds","Math","floor","h","m","s","concat","className","children"],"sources":["C:/Users/greeny/Documents/ytdownload/tracker-app/frontend/src/components/Countdown.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function Countdown({ lastReset, onReset }) {\r\n  const [timeLeft, setTimeLeft] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const updateCountdown = () => {\r\n      const now = new Date();\r\n      const resetTime = new Date(lastReset);\r\n      resetTime.setDate(resetTime.getDate() + 1);\r\n      const diff = resetTime - now;\r\n      if (diff <= 0) {\r\n        onReset();\r\n      } else {\r\n        setTimeLeft(diff);\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(updateCountdown, 1000);\r\n    updateCountdown();\r\n\r\n    return () => clearInterval(interval);\r\n  }, [lastReset, onReset]);\r\n\r\n  const formatTime = (ms) => {\r\n    const totalSeconds = Math.floor(ms / 1000);\r\n    const h = Math.floor(totalSeconds / 3600);\r\n    const m = Math.floor((totalSeconds % 3600) / 60);\r\n    const s = totalSeconds % 60;\r\n    return `${h}h ${m}m ${s}s`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"countdown\">\r\n      <h2>Time left until next reset:</h2>\r\n      <div>{formatTime(timeLeft)}</div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,cAAe,SAAS,CAAAC,SAASA,CAAAC,IAAA,CAAyB,IAAxB,CAAEC,SAAS,CAAEC,OAAQ,CAAC,CAAAF,IAAA,CACtD,KAAM,CAACG,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,CAAC,CAAC,CAE3CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CACtB,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAD,IAAI,CAACN,SAAS,CAAC,CACrCO,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,CAAG,CAAC,CAAC,CAC1C,KAAM,CAAAC,IAAI,CAAGH,SAAS,CAAGF,GAAG,CAC5B,GAAIK,IAAI,EAAI,CAAC,CAAE,CACbT,OAAO,CAAC,CAAC,CACX,CAAC,IAAM,CACLE,WAAW,CAACO,IAAI,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAGC,WAAW,CAACR,eAAe,CAAE,IAAI,CAAC,CACnDA,eAAe,CAAC,CAAC,CAEjB,MAAO,IAAMS,aAAa,CAACF,QAAQ,CAAC,CACtC,CAAC,CAAE,CAACX,SAAS,CAAEC,OAAO,CAAC,CAAC,CAExB,KAAM,CAAAa,UAAU,CAAIC,EAAE,EAAK,CACzB,KAAM,CAAAC,YAAY,CAAGC,IAAI,CAACC,KAAK,CAACH,EAAE,CAAG,IAAI,CAAC,CAC1C,KAAM,CAAAI,CAAC,CAAGF,IAAI,CAACC,KAAK,CAACF,YAAY,CAAG,IAAI,CAAC,CACzC,KAAM,CAAAI,CAAC,CAAGH,IAAI,CAACC,KAAK,CAAEF,YAAY,CAAG,IAAI,CAAI,EAAE,CAAC,CAChD,KAAM,CAAAK,CAAC,CAAGL,YAAY,CAAG,EAAE,CAC3B,SAAAM,MAAA,CAAUH,CAAC,OAAAG,MAAA,CAAKF,CAAC,OAAAE,MAAA,CAAKD,CAAC,MACzB,CAAC,CAED,mBACExB,KAAA,QAAK0B,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB7B,IAAA,OAAA6B,QAAA,CAAI,6BAA2B,CAAI,CAAC,cACpC7B,IAAA,QAAA6B,QAAA,CAAMV,UAAU,CAACZ,QAAQ,CAAC,CAAM,CAAC,EAC9B,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}